///////////////////////////////////////////////////////////////
// This is generated code. 
//////////////////////////////////////////////////////////////
// Code is generated using LLBLGen Pro version: 2.6
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates.NET20
// Templates vendor: Solutions Design.
// Templates version: 
//////////////////////////////////////////////////////////////
using System;
using System.Data;
using Reliant.RenuOil.DAL;
using Reliant.RenuOil.DAL.HelperClasses;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace Reliant.RenuOil.DAL.FactoryClasses
{
	/// <summary>
	/// Generates IEntityFields instances for different kind of Entities. 
	/// This class is generated. Do not modify.
	/// </summary>
	public partial class EntityFieldsFactory
	{
		/// <summary>
		/// Private CTor, no instantiation possible.
		/// </summary>
		private EntityFieldsFactory()
		{
		}


		/// <summary>General factory entrance method which will return an EntityFields object with the format generated by the factory specified</summary>
		/// <param name="relatedEntityType">The type of entity the fields are for</param>
		/// <returns>The IEntityFields instance requested</returns>
		public static IEntityFields CreateEntityFieldsObject(Reliant.RenuOil.DAL.EntityType relatedEntityType)
		{
			IEntityFields fieldsToReturn=null;
			IInheritanceInfoProvider inheritanceProvider = InheritanceInfoProviderSingleton.GetInstance();
			IFieldInfoProvider fieldProvider = FieldInfoProviderSingleton.GetInstance();
			IPersistenceInfoProvider persistenceProvider = PersistenceInfoProviderSingleton.GetInstance();
			switch(relatedEntityType)
			{
				case Reliant.RenuOil.DAL.EntityType.AccountEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, persistenceProvider, "AccountEntity");
					break;
				case Reliant.RenuOil.DAL.EntityType.AccountEmployeeAssignmentEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, persistenceProvider, "AccountEmployeeAssignmentEntity");
					break;
				case Reliant.RenuOil.DAL.EntityType.AssetCategoryEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, persistenceProvider, "AssetCategoryEntity");
					break;
				case Reliant.RenuOil.DAL.EntityType.AssetReclamationServiceEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, persistenceProvider, "AssetReclamationServiceEntity");
					break;
				case Reliant.RenuOil.DAL.EntityType.AssetReclamationServiceChangeLogEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, persistenceProvider, "AssetReclamationServiceChangeLogEntity");
					break;
				case Reliant.RenuOil.DAL.EntityType.AssetTypeEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, persistenceProvider, "AssetTypeEntity");
					break;
				case Reliant.RenuOil.DAL.EntityType.BaleEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, persistenceProvider, "BaleEntity");
					break;
				case Reliant.RenuOil.DAL.EntityType.ChangeLogEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, persistenceProvider, "ChangeLogEntity");
					break;
				case Reliant.RenuOil.DAL.EntityType.ChangeTypeEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, persistenceProvider, "ChangeTypeEntity");
					break;
				case Reliant.RenuOil.DAL.EntityType.DeepFryerEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, persistenceProvider, "DeepFryerEntity");
					break;
				case Reliant.RenuOil.DAL.EntityType.DeepFryerChangeLogEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, persistenceProvider, "DeepFryerChangeLogEntity");
					break;
				case Reliant.RenuOil.DAL.EntityType.DeepFryerServiceEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, persistenceProvider, "DeepFryerServiceEntity");
					break;
				case Reliant.RenuOil.DAL.EntityType.DeepFryerServiceChangeLogEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, persistenceProvider, "DeepFryerServiceChangeLogEntity");
					break;
				case Reliant.RenuOil.DAL.EntityType.DockEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, persistenceProvider, "DockEntity");
					break;
				case Reliant.RenuOil.DAL.EntityType.ElmahErrorEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, persistenceProvider, "ElmahErrorEntity");
					break;
				case Reliant.RenuOil.DAL.EntityType.EmployeeEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, persistenceProvider, "EmployeeEntity");
					break;
				case Reliant.RenuOil.DAL.EntityType.LoadEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, persistenceProvider, "LoadEntity");
					break;
				case Reliant.RenuOil.DAL.EntityType.MobileDeviceEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, persistenceProvider, "MobileDeviceEntity");
					break;
				case Reliant.RenuOil.DAL.EntityType.RebateEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, persistenceProvider, "RebateEntity");
					break;
				case Reliant.RenuOil.DAL.EntityType.RebateTypeEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, persistenceProvider, "RebateTypeEntity");
					break;
				case Reliant.RenuOil.DAL.EntityType.RecycleServiceEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, persistenceProvider, "RecycleServiceEntity");
					break;
				case Reliant.RenuOil.DAL.EntityType.RecycleServiceActionEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, persistenceProvider, "RecycleServiceActionEntity");
					break;
				case Reliant.RenuOil.DAL.EntityType.RecycleServiceChangeLogEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, persistenceProvider, "RecycleServiceChangeLogEntity");
					break;
				case Reliant.RenuOil.DAL.EntityType.RecycleTypeEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, persistenceProvider, "RecycleTypeEntity");
					break;
				case Reliant.RenuOil.DAL.EntityType.RecycleVendorEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, persistenceProvider, "RecycleVendorEntity");
					break;
				case Reliant.RenuOil.DAL.EntityType.RecycleVendorServiceEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, persistenceProvider, "RecycleVendorServiceEntity");
					break;
				case Reliant.RenuOil.DAL.EntityType.ServiceLocationEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, persistenceProvider, "ServiceLocationEntity");
					break;
				case Reliant.RenuOil.DAL.EntityType.ServiceLocationAssetTypeEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, persistenceProvider, "ServiceLocationAssetTypeEntity");
					break;
				case Reliant.RenuOil.DAL.EntityType.ServiceLocationAssetTypeChangeLogEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, persistenceProvider, "ServiceLocationAssetTypeChangeLogEntity");
					break;
				case Reliant.RenuOil.DAL.EntityType.ServiceLocationEmployeeAssignmentEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, persistenceProvider, "ServiceLocationEmployeeAssignmentEntity");
					break;
				case Reliant.RenuOil.DAL.EntityType.ServiceLocationRecycleTypeEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, persistenceProvider, "ServiceLocationRecycleTypeEntity");
					break;
				case Reliant.RenuOil.DAL.EntityType.ServiceTypeEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, persistenceProvider, "ServiceTypeEntity");
					break;
				case Reliant.RenuOil.DAL.EntityType.SettingEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, persistenceProvider, "SettingEntity");
					break;
				case Reliant.RenuOil.DAL.EntityType.StatusEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, persistenceProvider, "StatusEntity");
					break;
				case Reliant.RenuOil.DAL.EntityType.UserEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, persistenceProvider, "UserEntity");
					break;
				case Reliant.RenuOil.DAL.EntityType.UserAccountEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, persistenceProvider, "UserAccountEntity");
					break;
				case Reliant.RenuOil.DAL.EntityType.UserTypeEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, persistenceProvider, "UserTypeEntity");
					break;
				case Reliant.RenuOil.DAL.EntityType.WorkOrderEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, persistenceProvider, "WorkOrderEntity");
					break;
				case Reliant.RenuOil.DAL.EntityType.WorkOrderEmployeeEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, persistenceProvider, "WorkOrderEmployeeEntity");
					break;
				case Reliant.RenuOil.DAL.EntityType.WorkOrderServiceLocationEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, persistenceProvider, "WorkOrderServiceLocationEntity");
					break;
			}
			return fieldsToReturn;
		}
		
		/// <summary>General method which will return an array of IEntityFieldCore objects, used by the InheritanceInfoProvider. Only the fields defined in the entity are returned, no inherited fields.</summary>
		/// <param name="entityName">the name of the entity to get the fields for. Example: "CustomerEntity"</param>
		/// <returns>array of IEntityFieldCore fields, defined in the entity with the name specified</returns>
		internal static IEntityFieldCore[] CreateFields(string entityName)
		{
			IFieldInfoProvider fieldProvider = FieldInfoProviderSingleton.GetInstance();
			IPersistenceInfoProvider persistenceProvider = PersistenceInfoProviderSingleton.GetInstance();
			return fieldProvider.GetEntityFieldsArray(entityName, persistenceProvider);
		}



		#region Included Code

		#endregion
	}
}
